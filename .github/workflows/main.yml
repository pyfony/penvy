name: main
on: [push]

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.8
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Cache virtual environment
        id: cache-venv
        uses: actions/cache@v2
        with:
          path: |
            .venv
            ~/.poetry/env
          key: ${{ runner.os }}-env-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/environment.yml') }}
      - name: Install dependencies
        run: |
          poetry install
      - name: Formatting and Linting
        run: |
          source $VENV
          poe black-check
          poe pylint

  release:
    name: Release package
    needs: build_test
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'bump version to')"
    steps:
      - name: Extract version
        id: extract_version
        uses: frabert/replace-string-action@v1.1
        with:
          pattern: '^bump version to ([^\n]+).*$'
          string: ${{ github.event.head_commit.message }}
          replace-with: '$1'
          flags: 's'
      - name: Extract prerelease
        id: extract_prerelease
        uses: frabert/replace-string-action@v1.1
        with:
          pattern: '^[\d.]+(\.dev[\d]+|a[\d]+|b[\d]+|rc[\d]+)?$'
          string: ${{ steps.extract_version.outputs.replaced }}
          replace-with: '$1'
      - name: Show extracted version
        run: echo "${{ steps.extract_version.outputs.replaced }}"
      - name: Show extracted prerelease
        run: echo "${{ steps.extract_prerelease.outputs.replaced }}"
      - name: Extract description
        id: extract_description
        uses: frabert/replace-string-action@v1.1
        with:
          pattern: '^bump version to [^\n]+[\n]+'
          string: ${{ github.event.head_commit.message }}
          replace-with: ''
      - name: Show extracted description
        run: echo "${{ steps.extract_description.outputs.replaced }}"
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build package
        run: |
          poetry install
          poetry build -f wheel
      - name: Resolve wheel name
        run: |
          echo "WHEEL_NAME=$(ls -1 dist/ | grep -e "\.whl$" | sort -r | head -n 1)" >> $GITHUB_ENV
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ steps.extract_version.outputs.replaced }}'
          release_name: 'Release ${{ steps.extract_version.outputs.replaced }}'
          body: '${{ steps.extract_description.outputs.replaced }}'
          draft: false
          prerelease: ${{ steps.extract_prerelease.outputs.replaced != '' }}
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ env.WHEEL_NAME }}
          asset_name: ${{ env.WHEEL_NAME }}
          asset_content_type: application/zip
      - name: Publish package to pypi.org
        run: |
          poetry publish -u __token__ -p ${{ secrets.PYPI_PUBLISH }}
